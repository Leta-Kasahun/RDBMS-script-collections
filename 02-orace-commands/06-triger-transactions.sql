-- File: 06_stored_procedures_triggers_transactions.sql

CREATE TABLE salary_audit (
    audit_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    employee_id NUMBER NOT NULL,
    old_salary NUMBER,
    new_salary NUMBER,
    changed_at TIMESTAMP DEFAULT SYSTIMESTAMP,
    changed_by VARCHAR2(100)
);

CREATE OR REPLACE PROCEDURE hire_employee (
    p_first_name IN VARCHAR2,
    p_last_name IN VARCHAR2,
    p_email IN VARCHAR2,
    p_phone IN VARCHAR2,
    p_hire_date IN DATE,
    p_job_id IN VARCHAR2,
    p_salary IN NUMBER,
    p_manager_id IN NUMBER,
    p_department_id IN NUMBER
) AS
    v_emp_id NUMBER;
BEGIN
    INSERT INTO employees (first_name, last_name, email, phone_number, hire_date, job_id, salary, manager_id, department_id)
    VALUES (p_first_name, p_last_name, p_email, p_phone, p_hire_date, p_job_id, p_salary, p_manager_id, p_department_id)
    RETURNING employee_id INTO v_emp_id;

    INSERT INTO job_history (employee_id, start_date, end_date, job_id, department_id)
    VALUES (v_emp_id, p_hire_date, p_hire_date, p_job_id, p_department_id);

    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE change_salary (
    p_employee_id IN NUMBER,
    p_new_salary IN NUMBER,
    p_changed_by IN VARCHAR2
) AS
    v_old_salary NUMBER;
BEGIN
    SELECT salary INTO v_old_salary FROM employees WHERE employee_id = p_employee_id FOR UPDATE;

    UPDATE employees
    SET salary = p_new_salary
    WHERE employee_id = p_employee_id;

    INSERT INTO salary_audit (employee_id, old_salary, new_salary, changed_by)
    VALUES (p_employee_id, v_old_salary, p_new_salary, p_changed_by);

    COMMIT;
END;
/

CREATE OR REPLACE TRIGGER trg_before_salary_update
BEFORE UPDATE OF salary ON employees
FOR EACH ROW
DECLARE
    v_max_salary NUMBER;
BEGIN
    SELECT max_salary INTO v_max_salary FROM jobs WHERE job_id = :NEW.job_id;
    IF :NEW.salary > v_max_salary THEN
        RAISE_APPLICATION_ERROR(-20001, 'Salary exceeds maximum for job');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_after_employee_update
AFTER UPDATE ON employees
FOR EACH ROW
BEGIN
    IF :OLD.salary <> :NEW.salary THEN
        INSERT INTO salary_audit (employee_id, old_salary, new_salary, changed_by)
        VALUES (:NEW.employee_id, :OLD.salary, :NEW.salary, USER);
    END IF;
END;
/

-- Transactional example block
DECLARE
    v_emp_id NUMBER;
BEGIN
    SAVEPOINT sp_start;

    hire_employee('Carlos', 'Reyes', 'carlos.reyes@example.com', '555-9876', SYSDATE, 'DEV', 90000, NULL, 2);

    BEGIN
        change_salary(1, 95000, 'admin_user');
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK TO sp_start;
    END;

    COMMIT;
END;
/
